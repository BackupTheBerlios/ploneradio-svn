#------------------------------------------------------------------------------
# Name:         PloneRadioTool.py
# Purpose:      unknown 
#
# Author:       Wolfgang Reutz <wolfgang.reutz@fh-vorarlberg.ac.at>
# generated by: ArchGenXML Version 1.0 http://sf.net/projects/archetypes/
#
# Created:      Tue Apr  5 15:06:12 2005
# RCS-ID:       $Id: PloneRadioTool.py,v 1.3 2005/04/05 14:16:07 wreutz Exp $
# Copyright:    (c) 2005 by Fachhochschule Vorarlberg
# Licence:      GNU General Public Licence (GPL) Version 2 or later
#------------------------------------------------------------------------------
from AccessControl import ClassSecurityInfo
from Products.Archetypes.public import *

    
import string
import urllib


from Products.CMFCore.utils import UniqueObject

    
class PloneRadioTool(UniqueObject,BaseContent):
    security = ClassSecurityInfo()
    portal_type = meta_type = 'PloneRadioTool' 
    archetype_name = 'PloneRadioTool'   #this name appears in the 'add' box 
    schema=BaseSchema  + Schema((
    ),
    )

    #toolconstructors have no id argument, the id is fixed
    def __init__(self):
        BaseContent.__init__(self,'portal_ploneradiotool')
        


    #Methods

    def generatePlaylist(self,url,type):
        '''
        
        '''
        
        request = self.REQUEST
        RESPONSE =  request.RESPONSE
        
        if type == 'm3u':
          RESPONSE.setHeader('Content-Type', 'audio/mpegurl')
          RESPONSE.setHeader('Content-Disposition', 'attachment; filename=playlist.m3u')
          playlist = '#EXTM3U\n'
          playlist += url
        elif type == 'pls':
          RESPONSE.setHeader('Content-Type', 'audio/scpls')
          RESPONSE.setHeader('Content-Disposition', 'attachment; filename=playlist.pls')
          playlist = '[livestream]\n' 
          playlist += 'File1=' + url + '\n'
          playlist += 'Title1=Livestream\n'
          playlist += 'Length1=-1\n'
          playlist += 'NumberOfEntries=1\n' 
          playlist += 'Version=2'
        else:
          raise GeneratePlaylistError, 'no valid type for playlist generation entered!'
          
        return playlist


    def getRecentSongs(self,stream_nr,quality='1'):
        '''
        Return (a list of) 4 values:
        error: 0 ... no error occured/log successfully read
               1 ... error accessing log files
        first_track: the currently playing track
        tracks: a list of the n last played songs (n is defined by parameter 'recentsongstolist'
        mode: returns the input parameter 'mode'
        listeners: returns the number of the current listeners if log is parsed from icecast2
        '''
        
        stream_url = self.getProperty('stream' + stream_nr + '_url' + quality)
        url = self.getProperty('stream'+stream_nr+'_loganalysis_url')
        type = self.getProperty('stream'+stream_nr+'_loganalysis_type')
        
        tracks = []
        error = 0
        first_track = []
        mode = ''
        nomatch = 0
        listeners= -1
        
        mountpoint_string = stream_url[8:]
        mountpoint_string = string.split(mountpoint_string, '/')
        mountpoint = '/' + mountpoint_string[len(mountpoint_string)-1]
           
        log = urllib.urlopen(url).read()
        #try:
        log = string.split(log, '\n')
        if type == 'nicecast':
          for line in log:
        	if line != '':
        	  line = string.split(line, ' - ')
        	  tracks.append(line)
        	  # delete last line, because it's empty
        	  #last_track = tracks.pop()
        	  # reduce list of tracks to the last 5 songs
        	
        if type == 'icecast2':
          log.pop(0)
          nomatch = 1
          for line in log:
        	if line != '':
        	  line = string.split(line, ' | ')
        	  if line[0] == mountpoint:
        		line[2] = string.split(line[2], ' - ')
        		line[2][1] = line[2][1][:-2]
        		tracks.append(line[2])
        		listeners = line[1]
        		nomatch = 0
        
        count = len(tracks)
        recentsongstolist = int(self.getProperty('stream'+stream_nr+'_loganalysis_recentsongstolist')) + 1
        if count > recentsongstolist:
          del tracks[recentsongstolist:count]
        if count == 1:
          tracks.append(('',''))
        #extract first song in list as current playing song
        try:
          first_track = tracks.pop(0)
        except:
          first_track = ('','')
        
        # return type as mode that the portlet can decide to either show
        # the recent tracks or not (in icecast2 mode this makes no sense)
        mode = type
        
        # if the mountpoint couldn't be found in the icecast2 status,
        # return error
        if nomatch == 1:
          error = 1
        
        #except:
        #  error = 1
           
        return error, first_track, tracks, mode, listeners


    def generatePlayerFrameset(self,stream_nr,plugin,quality='1'):
        '''
        
        '''
        
        if (plugin == 'quicktime') | (plugin == 'windowsmedia'):
          html = "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Frameset//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd\">\n"""
          html += "<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"de\">\n"""
          html += "<head>\n"
          html += "  <title>Player</title>\n"
          html += "  <style type=\"text/css\">\n"""
          html += "    body { margin: 0px; }\n"
          html += "  </style>\n"
          html += "</head>\n"
          html += "<frameset rows=\""
          if plugin == 'quicktime':
        	html += "15"
          elif plugin == 'windowsmedia':
        	html += "65"
          html += ",1*\">\n"
          html += "  <frame src=\"portal_ploneradiotool/generatePluginPage?stream_nr=" + stream_nr + "&plugin=" + plugin + "&quality=" + quality + "\""
          html += " marginheight=\"0\" marginwidth=\"0\" scrolling=\"no\" noresize=\"noresize\" frameborder=0 />\n"
          html += "  <frame src=\"player_info" + stream_nr + "\" marginheight=\"0\" marginwidth=\"0\" scrolling=\"no\" noresize=\"noresize\" frameborder=0 />\n"
          html += "</frameset>\n"
        
        if plugin == 'java':
          html = "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">\n"
          html += "<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"de\">\n"
          html += "<head>\n"
          html += "  <title>Player</title>\n"
          html += "</head>\n"
          html += "  <style type=\"text/css\">\n"
          html += "      body { margin: 0px; }\n"
          html += "  </style>\n"
          html += "<body topmargin=0 leftmargin=0 marginwidth=0 marginheight=0>\n"        
          html += "java"
          html += "</body>\n"
        
        html += "</html>"
        
        return html


    def generatePluginPage(self,stream_nr,plugin,quality='1'):
        '''
        
        '''
        
        html = "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\" \"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd\">\n"
        html += "<html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"de\">\n"
        html += "<head>\n"
        html += "  <title>Player</title>\n"
        html += "</head>\n"
        html += "  <style type=\"text/css\">\n"
        html += "      body { margin: 0px; }\n"
        html += "    </style>\n"
        html += "<body topmargin=0 leftmargin=0 marginwidth=0 marginheight=0>\n"        
        
        if plugin == 'quicktime':
          html += "<object classid=\"clsid:02BF25D5-8C17-4B23-BC80-D3488ABDDC6B\"\n"
          html += "        codebase=\"http://www.apple.com/qtactivex/qtplugin.cab\"\n"
          html += "        width=\"250\"\n"
          html += "        height=\"15\">\n"
          html += "        <param name=\"SRC\" value=\"uneedqt4.qti\">\n"
          html += "        <param name=\"QTSRC\" value=\"portal_ploneradiotool/generatePlaylist?url="
          html += self.getProperty('stream'+stream_nr+'_url'+quality)
          html += "&type=pls\">\n"
          html += "        <param name=\"TYPE\" value=\"image/x-quicktime\">\n"
          html += "        <param name=\"AUTOPLAY\" value=\"true\">\n"
          html += "        <param name=\"CONTROLLER\" value=\"true\">\n"
          html += "        <param name=\"BGCOLOR\" value=\"#ffffff\">\n"
          html += "        <embed src=\"uneedqt4.qti\"\n"
          html += "               qtsrc=\"portal_ploneradiotool/generatePlaylist?url="
          html += self.getProperty('stream'+stream_nr+'_url'+quality)
          html += "&type=pls\"\n"
          html += "               type=\"image/x-quicktime\"\n"
          html += "               pluginspage=\"http://www.apple.com/quicktime/download/\"\n"
          html += "               bgcolor=\"#ffffff\"\n"
          html += "               autostart=\"true\"\n"
          html += "               controller=\"true\"\n"
          html += "               width=\"250\"\n"
          html += "               height=\"15\">\n"
          html += "        </embed>\n"
          html += "</object>\n"
        
        elif plugin == 'windowsmedia':
          html += "<object classid=\"CLSID:6BF52A52-394A-11d3-B153-00C04F79FAA6\"\n"
          html += "        width=\"250\"\n"
          html += "        height=\"65\">\n"
          html += "        <param name=\"URL\" value=\"portal_ploneradiotool/generatePlaylist?url="
          html += self.getProperty('stream'+stream_nr+'_url'+quality)
          html += "&type=m3u\">\n"
          html += "        <param name=\"autostart\" value=\"true\">\n"
          html += "        <embed pluginspage=\"http://www.microsoft.com/windows/mediaplayer/\"\n"
          html += "               src=\"portal_ploneradiotool/generatePlaylist?url="
          html += self.getProperty('stream'+stream_nr+'_url'+quality)
          html += "&type=m3u\"\n"
          html += "               type=\"application/x-mplayer2\"\n"
          html += "               autostart=\"true\"\n"
          html += "               width=\"250\"\n"
          html += "               height=\"65\">\n"
          html += "        </embed>\n"
          html += "</object>\n"
          
        else:
          html += "  <h1>wrong plugin in url submitted!</h1>\n"
          
        html += "</body>\n"
        html += "</html>"
        
        return html


    def __init__(self):
        '''
        
        '''
        
        BaseContent.__init__(self,'portal_ploneradiotool')
        
        self.manage_addProperty('stream1_enable', 0, 'boolean')
        self.manage_addProperty('stream1_name', '', 'string')
        self.manage_addProperty('stream1_url1', '', 'string')
        self.manage_addProperty('stream1_url1_remarks', '','string')
        self.manage_addProperty('stream1_url2', '', 'string')
        self.manage_addProperty('stream1_url2_remarks', '','string')
        self.manage_addProperty('stream1_loganalysis_enable', 0,'boolean')
        self.manage_addProperty('stream1_loganalysis_type', 'icecast2','string')
        self.manage_addProperty('stream1_loganalysis_url', '', 'string')
        self.manage_addProperty('stream1_loganalysis_album_url', '', 'string')
        self.manage_addProperty('stream1_loganalysis_recentsongstolist', 5, 'int')
        self.manage_addProperty('stream1_loganalysis_showlisteners', 1, 'boolean')
        self.manage_addProperty('stream1_loganalysis_history_url', '', 'string')
        self.manage_addProperty('stream1_loganalysis_history_type', 'icecast2', 'string')
        self.manage_addProperty('stream1_loganalysis_history_songstolist', 20, 'int')
        
        self.manage_addProperty('stream2_enable', 0, 'boolean')
        self.manage_addProperty('stream2_name', '', 'string')
        self.manage_addProperty('stream2_url1', '', 'string')
        self.manage_addProperty('stream2_url1_remarks', '','string')
        self.manage_addProperty('stream2_url2', '', 'string')
        self.manage_addProperty('stream2_url2_remarks', '','string')
        self.manage_addProperty('stream2_loganalysis_enable', 0,'boolean')
        self.manage_addProperty('stream2_loganalysis_type', 'icecast2','string')
        self.manage_addProperty('stream2_loganalysis_url', '', 'string')
        self.manage_addProperty('stream2_loganalysis_album_url', '', 'string')
        self.manage_addProperty('stream2_loganalysis_recentsongstolist', 5, 'int')
        self.manage_addProperty('stream2_loganalysis_showlisteners', 1, 'boolean')
        self.manage_addProperty('stream2_loganalysis_history_url', '', 'string')
        self.manage_addProperty('stream2_loganalysis_history_type', 'icecast2', 'string')
        self.manage_addProperty('stream2_loganalysis_history_songstolist', 20, 'int')


    def setProperties(self,preferences):
        '''
        
        '''
        
        self.stream1_enable = preferences['stream1_enable']
        self.stream1_name = preferences['stream1_name']
        self.stream1_url1 = preferences['stream1_url1']
        self.stream1_url1_remarks = preferences['stream1_url1_remarks']
        self.stream1_url2 = preferences['stream1_url2']
        self.stream1_url2_remarks = preferences['stream1_url2_remarks']
        self.stream1_loganalysis_enable = preferences['stream1_loganalysis_enable']
        self.stream1_loganalysis_type = preferences['stream1_loganalysis_type']
        self.stream1_loganalysis_url = preferences['stream1_loganalysis_url']
        self.stream1_loganalysis_album_url = preferences['stream1_loganalysis_album_url']
        self.stream1_loganalysis_recentsongstolist = preferences['stream1_loganalysis_recentsongstolist']
        self.stream1_loganalysis_showlisteners = preferences['stream1_loganalysis_showlisteners']
        self.stream1_loganalysis_history_url = preferences['stream1_loganalysis_history_url']
        self.stream1_loganalysis_history_type = preferences['stream1_loganalysis_history_type']
        self.stream1_loganalysis_history_songstolist = preferences['stream1_loganalysis_history_songstolist']
        self.stream2_enable = preferences['stream2_enable']
        self.stream2_name = preferences['stream2_name']
        self.stream2_url1 = preferences['stream2_url1']
        self.stream2_url1_remarks = preferences['stream2_url1_remarks']
        self.stream2_url2 = preferences['stream2_url2']
        self.stream2_url2_remarks = preferences['stream2_url2_remarks']
        self.stream2_loganalysis_enable = preferences['stream2_loganalysis_enable']
        self.stream2_loganalysis_type = preferences['stream2_loganalysis_type']
        self.stream2_loganalysis_url = preferences['stream2_loganalysis_url']
        self.stream2_loganalysis_album_url = preferences['stream2_loganalysis_album_url']
        self.stream2_loganalysis_recentsongstolist = preferences['stream2_loganalysis_recentsongstolist']
        self.stream2_loganalysis_showlisteners = preferences['stream2_loganalysis_showlisteners']
        self.stream2_loganalysis_history_url = preferences['stream2_loganalysis_history_url']
        self.stream2_loganalysis_history_type = preferences['stream2_loganalysis_history_type']
        self.stream2_loganalysis_history_songstolist = preferences['stream2_loganalysis_history_songstolist']


    def sotf_rss_station(self,url,star=0,count=10):
        '''
        
        '''

        import feedparser_mod   # import modified feedparser.py with sotf namespace support
        from time import strptime, strftime
        
        e = {}
        error = 0
        
        try:
            d = feedparser_mod.parse(url)
        except:
            error = 1
        if error != 1:
            e['bozo'] = d['bozo']
            e['station_title'] = d['feed']['title']
            e['station_language'] = d['feed']['language']
            e['station_description'] = d['feed']['tagline']
            e['station_url'] = d['feed']['link']
            e['station_publisher_name'] = d['feed']['publisher_detail']['name']
            e['station_publisher_email'] = d['feed']['publisher_detail']['email']
            e['entries'] = []
            for entry in d['entries']:
                f = {}
                f['title'] = entry['title']
                f['episode_title'] = entry['sotf_episodetitle']
                f['episode_sequence'] = entry['sotf_episodesequence']
                f['programme_description'] = entry['summary']
                f['programme_link'] = entry['link']
                if entry['sotf_broadcastdate'] == '':
                    f['broadcast_date'] = ''
                else:
                    # strip TZ from time and reformat it to the timeformat set by Site Propertiesin ZMI
                    f['broadcast_date'] = strftime(self.portal_properties.site_properties.getProperty('localLongTimeFormat'), strptime(entry['sotf_broadcastdate'][:-3], '%Y-%m-%d %H:%M:%S'))
                f['mediafiles'] = []
                for mediafile in entry['sotf_mediafiles']:
                    g = {}
                    g['type'] = mediafile['type']
                    g['url'] = mediafile['url']
                    g['bitrate'] = mediafile['bitrate']
                    g['format'] = mediafile['format']
                    g['image'] = mediafile['image']
                    f['mediafiles'].append(g)
                e['entries'].append(f)
        
        return e, error


    def feedparsertest(self,url):
        '''
        
        '''
        
        import feedparser_mod
                
        d = feedparser_mod.parse(url)
        return d



    # uncomment lines below when you need
    factory_type_information={
        'allowed_content_types':() ,
        #'content_icon':'PloneRadioTool.gif',
        'immediate_view':'prefs_ploneradio',
        'global_allow':0,
        'filter_content_types':1,
        }

        
    actions=  (
        

          )
        

registerType(PloneRadioTool)
# end of class PloneRadioTool


